# GF'd Dating App - Local Development Services
# This provides all the infrastructure services for local development
# Frontend runs via npm/vite, backend is stubbed for future implementation

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: gfd-postgres
    environment:
      - POSTGRES_DB=gfd_db
      - POSTGRES_USER=gfd_user
      - POSTGRES_PASSWORD=gfd_password
      - POSTGRES_MULTIPLE_DATABASES=gfd_auth,gfd_analytics
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./services/database/schema.sql:/docker-entrypoint-initdb.d/02-schema.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gfd_user -d gfd_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gfd-network

  # Redis Cache & Sessions
  redis:
    image: redis:7-alpine
    container_name: gfd-redis
    command: redis-server --appendonly yes --requirepass gfd_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - gfd-network

  # MinIO (S3-compatible file storage)
  minio:
    image: minio/minio:latest
    container_name: gfd-minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=gfd_minio_user
      - MINIO_ROOT_PASSWORD=gfd_minio_password
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - gfd-network

  # MongoDB (for analytics and logs)
  mongodb:
    image: mongo:7
    container_name: gfd-mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=gfd_mongo_user
      - MONGO_INITDB_ROOT_PASSWORD=gfd_mongo_password
      - MONGO_INITDB_DATABASE=gfd_analytics
    volumes:
      - mongodb_data:/data/db
      - ./services/mongodb/init.js:/docker-entrypoint-initdb.d/init.js
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gfd-network

  # Supabase (Local instance for auth experimentation)
  supabase-db:
    image: postgres:15-alpine
    container_name: gfd-supabase-db
    environment:
      - POSTGRES_DB=supabase
      - POSTGRES_USER=supabase
      - POSTGRES_PASSWORD=supabase_password
    volumes:
      - supabase_data:/var/lib/postgresql/data
    ports:
      - "54322:5432"
    networks:
      - gfd-network

  # Mailhog (Email testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: gfd-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - gfd-network

  # Nginx (Development proxy - optional)
  nginx:
    image: nginx:alpine
    container_name: gfd-nginx
    volumes:
      - ./services/nginx/nginx.dev.conf:/etc/nginx/nginx.conf
    ports:
      - "8080:80"
    depends_on:
      - postgres
      - redis
      - minio
    networks:
      - gfd-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  mongodb_data:
    driver: local
  supabase_data:
    driver: local

networks:
  gfd-network:
    driver: bridge
    name: gfd-network